export PS1="\$(fancyprompt) $ ";

fancyprompt(){
    echo -en "$(fancyprompt_smiley)$(fancyprompt_git)$(fancyprompt_basedir)"
}

fancyprompt_smiley(){
    if [ $? == 0 ]; then
        echo -e "${BG_COLOR_WHITE}${COLOR_GREEN}\u263a ${COLOR_RESET}";
    else
        echo -e "${BG_COLOR_WHITE}${COLOR_RED}\u2639 ${COLOR_RESET}";
    fi
}

fancyprompt_basedir(){
    echo -e "${BG_COLOR_GREEN}${COLOR_WHITE} /$(basename "$(pwd)")/ ${COLOR_RESET}";
}

fancyprompt_git(){
    if git status >/dev/null 2>&1; then
        if test "$(git status --porcelain 2>/dev/null| grep -Ev '^\?\?')" != ""; then
            echo -en "\001\e[48;5;162m\002";
        elif test "$(git log --branches --not --remotes)" != ""; then
            echo -en "\001$(tput setab 3)\002";
        else
            echo -en "\001\e[48;5;021m\002";
        fi;
        echo -e "${COLOR_WHITE} $(git rev-parse --abbrev-ref HEAD 2>/dev/null) ${COLOR_RESET}";
    fi
}

c_init(){
    if [[ "${1}" == "" ]]; then
        fname=$(basename "$(pwd)" | tr '[:upper:]' '[:lower:]').c
    else
        fname="${1}"
    fi

    test -d src || mkdir src

    if test -f "src/${fname}"; then
        echo "${fname} already exists."
        false
    else
        cat >"src/${fname}"<<EOF
#include <stdio.h>

int main(int argc __attribute__((unused)), char ** argv __attribute__((unused))) {
    return 0;
}
EOF
        if ! test -f .ycm_extra_conf.py; then
            cat >.ycm_extra_conf.py<<EOF
def FlagsForFile(f):
    return {
        'flags' : ['-Wall', '-Wextra'],
        'do_cache' : True
    }
EOF
        fi

        if ! test -f CMakeLists.txt; then
            cat >CMakeLists.txt<<EOF
cmake_minimum_required(VERSION 3.5)
project(${fname%.c})

set(CMAKE_C_FLAGS "-ggdb")
add_executable(${fname%.c} src/${fname})
EOF
        fi

        if ! test -f .gitignore; then
            cat >.gitignore<<EOF
**/*.o
**/.*.swp
${fname%.c}
core
EOF
        fi
		nvim "src/${fname}"
    fi
}

kernmod(){
    if [[ "${1}" == "" ]]; then
        fname=$(basename $(pwd) | tr A-Z a-z)
    else
        fname="${1}"
    fi
    
    test -f ${fname}.c || cat >"${fname}.c"<<EOF
#include <linux/module.h>
#include <linux/init.h>
#include <linux/list.h>    /* Linked list structures and functions */
#include <linux/slab.h>    /* kmalloc, kfree */
#include <linux/sched.h>   /* task_struct */
#include <linux/uaccess.h> /* copy_(to,from)_user */
#include <linux/cdev.h>    /* character device */
#include <linux/fs.h>      /* file_operations */

static int __init my_init(void)
{
    pr_info(KBUILD_MODNAME " loaded at %p\n", my_init);
    return 0;
}

static void __exit my_free(void)
{
    pr_info(KBUILD_MODNAME " unloaded at %p\n", my_free);
}

module_init(my_init);
module_exit(my_free);

MODULE_AUTHOR("Robert Larsen <robert@the-playground.dk>");
MODULE_LICENSE("GPL v2");
EOF
    test -f Makefile || cat >Makefile<<EOF
KDIR = /lib/modules/\`uname -r\`/build

kbuild:
	make -C \$(KDIR) M=\`pwd\`

clean:
	make -C \$(KDIR) M=\`pwd\` clean
EOF
    test -f Kbuild || cat >Kbuild<<EOF
EXTRA_FLAGS = -Wall -g
obj-m       = ${fname}.o
EOF
    test -e kernel || ln -s /lib/modules/$(uname -r)/build/ kernel
    vim ${fname}.c
}

find_elfs(){
    ROOT=${1:-/}
    find "${ROOT}" -type f -executable 2>/dev/null | while read path; do
        if readelf -h "${path}" >/dev/null 2>&1; then
            echo "${path}"
        fi
    done
}

compile_commands(){
    if ! test -f CMakeLists.txt; then
        echo "You should have a CMakeLists.txt file in the current directory"
    else
        ( rm -rf .build compile_commands.json && 
          mkdir .build &&
          cd .build &&
          cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 $* .. &&
          cp compile_commands.json ..
        )
    fi
}
